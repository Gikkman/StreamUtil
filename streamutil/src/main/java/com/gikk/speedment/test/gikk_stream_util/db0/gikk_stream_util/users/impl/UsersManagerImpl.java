package com.gikk.speedment.test.gikk_stream_util.db0.gikk_stream_util.users.impl;

import com.gikk.speedment.test.gikk_stream_util.db0.gikk_stream_util.users.Users;
import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.config.mapper.string.TrueFalseStringToBooleanMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@431ce2a.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class UsersManagerImpl extends AbstractSqlManager<Users> {
    
    private final TypeMapper<Integer, Integer> idTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> usernameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> timeOnlineTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<Integer, Integer> linesWrittenTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, Boolean> isTrustedTypeMapper = new TrueFalseStringToBooleanMapper();
    private final TypeMapper<String, Boolean> isFollowerTypeMapper = new TrueFalseStringToBooleanMapper();
    private final TypeMapper<String, Boolean> isSubscriberTypeMapper = new TrueFalseStringToBooleanMapper();
    
    public UsersManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Users> getEntityClass() {
        return Users.class;
    }
    
    @Override
    public Object get(Users entity, Column column) {
        switch (column.getName()) {
            case "ID" : return entity.getId();
            case "USERNAME" : return entity.getUsername();
            case "TIME_ONLINE" : return entity.getTimeOnline();
            case "LINES_WRITTEN" : return entity.getLinesWritten();
            case "IS_TRUSTED" : return entity.getIsTrusted();
            case "IS_FOLLOWER" : return entity.getIsFollower();
            case "IS_SUBSCRIBER" : return entity.getIsSubscriber();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Users entity, Column column, Object value) {
        switch (column.getName()) {
            case "ID" : entity.setId((Integer) value); break;
            case "USERNAME" : entity.setUsername((String) value); break;
            case "TIME_ONLINE" : entity.setTimeOnline((Integer) value); break;
            case "LINES_WRITTEN" : entity.setLinesWritten((Integer) value); break;
            case "IS_TRUSTED" : entity.setIsTrusted((Boolean) value); break;
            case "IS_FOLLOWER" : entity.setIsFollower((Boolean) value); break;
            case "IS_SUBSCRIBER" : entity.setIsSubscriber((Boolean) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("db0.gikk_stream_util.users");
    }
    
    protected Users defaultReadEntity(ResultSet resultSet) {
        final Users entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setUsername(usernameTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setTimeOnline(timeOnlineTypeMapper.toJavaType(resultSet.getInt(3)));
            entity.setLinesWritten(linesWrittenTypeMapper.toJavaType(resultSet.getInt(4)));
            entity.setIsTrusted(isTrustedTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setIsFollower(isFollowerTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setIsSubscriber(isSubscriberTypeMapper.toJavaType(resultSet.getString(7)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Users newInstance() {
        return new UsersImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Users entity) {
        return entity.getId();
    }
}