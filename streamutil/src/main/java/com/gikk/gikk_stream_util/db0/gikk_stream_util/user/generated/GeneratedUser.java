package com.gikk.gikk_stream_util.db0.gikk_stream_util.user.generated;

import com.gikk.gikk_stream_util.db0.gikk_stream_util.user.User;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.string.TrueFalseStringToBooleanMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table gikk_stream_util.db0.gikk_stream_util.user.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedUser extends Entity<User> {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getId()} method.
     */
    final ComparableField<User, Integer, Integer> ID = new ComparableFieldImpl<>(Identifier.ID, User::getId, User::setId, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUsername()} method.
     */
    final StringField<User, String> USERNAME = new StringFieldImpl<>(Identifier.USERNAME, User::getUsername, User::setUsername, new StringIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getStatus()} method.
     */
    final StringField<User, String> STATUS = new StringFieldImpl<>(Identifier.STATUS, User::getStatus, User::setStatus, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getTimeOnline()} method.
     */
    final ComparableField<User, Integer, Integer> TIME_ONLINE = new ComparableFieldImpl<>(Identifier.TIME_ONLINE, User::getTimeOnline, User::setTimeOnline, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getLinesWritten()} method.
     */
    final ComparableField<User, Integer, Integer> LINES_WRITTEN = new ComparableFieldImpl<>(Identifier.LINES_WRITTEN, User::getLinesWritten, User::setLinesWritten, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getIsTrusted()} method.
     */
    final ComparableField<User, String, Boolean> IS_TRUSTED = new ComparableFieldImpl<>(Identifier.IS_TRUSTED, User::getIsTrusted, User::setIsTrusted, new TrueFalseStringToBooleanMapper(), false);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getIsFollower()} method.
     */
    final ComparableField<User, String, Boolean> IS_FOLLOWER = new ComparableFieldImpl<>(Identifier.IS_FOLLOWER, User::getIsFollower, User::setIsFollower, new TrueFalseStringToBooleanMapper(), false);
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getIsSubscriber()} method.
     */
    final ComparableField<User, String, Boolean> IS_SUBSCRIBER = new ComparableFieldImpl<>(Identifier.IS_SUBSCRIBER, User::getIsSubscriber, User::setIsSubscriber, new TrueFalseStringToBooleanMapper(), false);
    
    /**
     * Returns the id of this User. The id field corresponds to the database
     * column db0.gikk_stream_util.user.ID.
     * 
     * @return the id of this User
     */
    Integer getId();
    
    /**
     * Returns the username of this User. The username field corresponds to the
     * database column db0.gikk_stream_util.user.USERNAME.
     * 
     * @return the username of this User
     */
    String getUsername();
    
    /**
     * Returns the status of this User. The status field corresponds to the
     * database column db0.gikk_stream_util.user.STATUS.
     * 
     * @return the status of this User
     */
    String getStatus();
    
    /**
     * Returns the timeOnline of this User. The timeOnline field corresponds to
     * the database column db0.gikk_stream_util.user.TIME_ONLINE.
     * 
     * @return the timeOnline of this User
     */
    Integer getTimeOnline();
    
    /**
     * Returns the linesWritten of this User. The linesWritten field corresponds
     * to the database column db0.gikk_stream_util.user.LINES_WRITTEN.
     * 
     * @return the linesWritten of this User
     */
    Integer getLinesWritten();
    
    /**
     * Returns the isTrusted of this User. The isTrusted field corresponds to the
     * database column db0.gikk_stream_util.user.IS_TRUSTED.
     * 
     * @return the isTrusted of this User
     */
    Boolean getIsTrusted();
    
    /**
     * Returns the isFollower of this User. The isFollower field corresponds to
     * the database column db0.gikk_stream_util.user.IS_FOLLOWER.
     * 
     * @return the isFollower of this User
     */
    Boolean getIsFollower();
    
    /**
     * Returns the isSubscriber of this User. The isSubscriber field corresponds
     * to the database column db0.gikk_stream_util.user.IS_SUBSCRIBER.
     * 
     * @return the isSubscriber of this User
     */
    Boolean getIsSubscriber();
    
    /**
     * Sets the id of this User. The id field corresponds to the database column
     * db0.gikk_stream_util.user.ID.
     * 
     * @param id to set of this User
     * @return this User instance
     */
    User setId(Integer id);
    
    /**
     * Sets the username of this User. The username field corresponds to the
     * database column db0.gikk_stream_util.user.USERNAME.
     * 
     * @param username to set of this User
     * @return this User instance
     */
    User setUsername(String username);
    
    /**
     * Sets the status of this User. The status field corresponds to the database
     * column db0.gikk_stream_util.user.STATUS.
     * 
     * @param status to set of this User
     * @return this User instance
     */
    User setStatus(String status);
    
    /**
     * Sets the timeOnline of this User. The timeOnline field corresponds to the
     * database column db0.gikk_stream_util.user.TIME_ONLINE.
     * 
     * @param timeOnline to set of this User
     * @return this User instance
     */
    User setTimeOnline(Integer timeOnline);
    
    /**
     * Sets the linesWritten of this User. The linesWritten field corresponds to
     * the database column db0.gikk_stream_util.user.LINES_WRITTEN.
     * 
     * @param linesWritten to set of this User
     * @return this User instance
     */
    User setLinesWritten(Integer linesWritten);
    
    /**
     * Sets the isTrusted of this User. The isTrusted field corresponds to the
     * database column db0.gikk_stream_util.user.IS_TRUSTED.
     * 
     * @param isTrusted to set of this User
     * @return this User instance
     */
    User setIsTrusted(Boolean isTrusted);
    
    /**
     * Sets the isFollower of this User. The isFollower field corresponds to the
     * database column db0.gikk_stream_util.user.IS_FOLLOWER.
     * 
     * @param isFollower to set of this User
     * @return this User instance
     */
    User setIsFollower(Boolean isFollower);
    
    /**
     * Sets the isSubscriber of this User. The isSubscriber field corresponds to
     * the database column db0.gikk_stream_util.user.IS_SUBSCRIBER.
     * 
     * @param isSubscriber to set of this User
     * @return this User instance
     */
    User setIsSubscriber(Boolean isSubscriber);
    
    enum Identifier implements FieldIdentifier<User> {
        
        ID ("ID"),
        USERNAME ("USERNAME"),
        STATUS ("STATUS"),
        TIME_ONLINE ("TIME_ONLINE"),
        LINES_WRITTEN ("LINES_WRITTEN"),
        IS_TRUSTED ("IS_TRUSTED"),
        IS_FOLLOWER ("IS_FOLLOWER"),
        IS_SUBSCRIBER ("IS_SUBSCRIBER");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "gikk_stream_util";
        }
        
        @Override
        public String tableName() {
            return "user";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}