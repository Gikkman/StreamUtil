package com.gikk.gikk_stream_util.db0.gikk_stream_util.users.generated;

import com.gikk.gikk_stream_util.db0.gikk_stream_util.users.Users;
import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.string.TrueFalseStringToBooleanMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import javax.annotation.Generated;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table gikk_stream_util.db0.gikk_stream_util.users.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedUsers extends Entity<Users> {
    
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getId()} method.
     */
    final ComparableField<Users, Integer, Integer> ID = new ComparableFieldImpl<>(Identifier.ID, Users::getId, Users::setId, new IntegerIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getUsername()} method.
     */
    final StringField<Users, String> USERNAME = new StringFieldImpl<>(Identifier.USERNAME, Users::getUsername, Users::setUsername, new StringIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getStatus()} method.
     */
    final StringField<Users, String> STATUS = new StringFieldImpl<>(Identifier.STATUS, Users::getStatus, Users::setStatus, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getTimeOnline()} method.
     */
    final ComparableField<Users, Integer, Integer> TIME_ONLINE = new ComparableFieldImpl<>(Identifier.TIME_ONLINE, Users::getTimeOnline, Users::setTimeOnline, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getLinesWritten()} method.
     */
    final ComparableField<Users, Integer, Integer> LINES_WRITTEN = new ComparableFieldImpl<>(Identifier.LINES_WRITTEN, Users::getLinesWritten, Users::setLinesWritten, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getIsTrusted()} method.
     */
    final ComparableField<Users, String, Boolean> IS_TRUSTED = new ComparableFieldImpl<>(Identifier.IS_TRUSTED, Users::getIsTrusted, Users::setIsTrusted, new TrueFalseStringToBooleanMapper(), false);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getIsFollower()} method.
     */
    final ComparableField<Users, String, Boolean> IS_FOLLOWER = new ComparableFieldImpl<>(Identifier.IS_FOLLOWER, Users::getIsFollower, Users::setIsFollower, new TrueFalseStringToBooleanMapper(), false);
    /**
     * This Field corresponds to the {@link Users} field that can be obtained
     * using the {@link Users#getIsSubscriber()} method.
     */
    final ComparableField<Users, String, Boolean> IS_SUBSCRIBER = new ComparableFieldImpl<>(Identifier.IS_SUBSCRIBER, Users::getIsSubscriber, Users::setIsSubscriber, new TrueFalseStringToBooleanMapper(), false);
    
    /**
     * Returns the id of this Users. The id field corresponds to the database
     * column db0.gikk_stream_util.users.ID.
     * 
     * @return the id of this Users
     */
    Integer getId();
    
    /**
     * Returns the username of this Users. The username field corresponds to the
     * database column db0.gikk_stream_util.users.USERNAME.
     * 
     * @return the username of this Users
     */
    String getUsername();
    
    /**
     * Returns the status of this Users. The status field corresponds to the
     * database column db0.gikk_stream_util.users.STATUS.
     * 
     * @return the status of this Users
     */
    String getStatus();
    
    /**
     * Returns the timeOnline of this Users. The timeOnline field corresponds to
     * the database column db0.gikk_stream_util.users.TIME_ONLINE.
     * 
     * @return the timeOnline of this Users
     */
    Integer getTimeOnline();
    
    /**
     * Returns the linesWritten of this Users. The linesWritten field corresponds
     * to the database column db0.gikk_stream_util.users.LINES_WRITTEN.
     * 
     * @return the linesWritten of this Users
     */
    Integer getLinesWritten();
    
    /**
     * Returns the isTrusted of this Users. The isTrusted field corresponds to
     * the database column db0.gikk_stream_util.users.IS_TRUSTED.
     * 
     * @return the isTrusted of this Users
     */
    Boolean getIsTrusted();
    
    /**
     * Returns the isFollower of this Users. The isFollower field corresponds to
     * the database column db0.gikk_stream_util.users.IS_FOLLOWER.
     * 
     * @return the isFollower of this Users
     */
    Boolean getIsFollower();
    
    /**
     * Returns the isSubscriber of this Users. The isSubscriber field corresponds
     * to the database column db0.gikk_stream_util.users.IS_SUBSCRIBER.
     * 
     * @return the isSubscriber of this Users
     */
    Boolean getIsSubscriber();
    
    /**
     * Sets the id of this Users. The id field corresponds to the database column
     * db0.gikk_stream_util.users.ID.
     * 
     * @param id to set of this Users
     * @return this Users instance
     */
    Users setId(Integer id);
    
    /**
     * Sets the username of this Users. The username field corresponds to the
     * database column db0.gikk_stream_util.users.USERNAME.
     * 
     * @param username to set of this Users
     * @return this Users instance
     */
    Users setUsername(String username);
    
    /**
     * Sets the status of this Users. The status field corresponds to the
     * database column db0.gikk_stream_util.users.STATUS.
     * 
     * @param status to set of this Users
     * @return this Users instance
     */
    Users setStatus(String status);
    
    /**
     * Sets the timeOnline of this Users. The timeOnline field corresponds to the
     * database column db0.gikk_stream_util.users.TIME_ONLINE.
     * 
     * @param timeOnline to set of this Users
     * @return this Users instance
     */
    Users setTimeOnline(Integer timeOnline);
    
    /**
     * Sets the linesWritten of this Users. The linesWritten field corresponds to
     * the database column db0.gikk_stream_util.users.LINES_WRITTEN.
     * 
     * @param linesWritten to set of this Users
     * @return this Users instance
     */
    Users setLinesWritten(Integer linesWritten);
    
    /**
     * Sets the isTrusted of this Users. The isTrusted field corresponds to the
     * database column db0.gikk_stream_util.users.IS_TRUSTED.
     * 
     * @param isTrusted to set of this Users
     * @return this Users instance
     */
    Users setIsTrusted(Boolean isTrusted);
    
    /**
     * Sets the isFollower of this Users. The isFollower field corresponds to the
     * database column db0.gikk_stream_util.users.IS_FOLLOWER.
     * 
     * @param isFollower to set of this Users
     * @return this Users instance
     */
    Users setIsFollower(Boolean isFollower);
    
    /**
     * Sets the isSubscriber of this Users. The isSubscriber field corresponds to
     * the database column db0.gikk_stream_util.users.IS_SUBSCRIBER.
     * 
     * @param isSubscriber to set of this Users
     * @return this Users instance
     */
    Users setIsSubscriber(Boolean isSubscriber);
    
    enum Identifier implements FieldIdentifier<Users> {
        
        ID ("ID"),
        USERNAME ("USERNAME"),
        STATUS ("STATUS"),
        TIME_ONLINE ("TIME_ONLINE"),
        LINES_WRITTEN ("LINES_WRITTEN"),
        IS_TRUSTED ("IS_TRUSTED"),
        IS_FOLLOWER ("IS_FOLLOWER"),
        IS_SUBSCRIBER ("IS_SUBSCRIBER");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "db0";
        }
        
        @Override
        public String schemaName() {
            return "gikk_stream_util";
        }
        
        @Override
        public String tableName() {
            return "users";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}