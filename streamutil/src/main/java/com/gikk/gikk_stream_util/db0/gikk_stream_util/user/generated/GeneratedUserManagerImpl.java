package com.gikk.gikk_stream_util.db0.gikk_stream_util.user.generated;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;

import javax.annotation.Generated;

import com.gikk.gikk_stream_util.db0.gikk_stream_util.user.User;
import com.gikk.gikk_stream_util.db0.gikk_stream_util.user.UserImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table gikk_stream_util.db0.gikk_stream_util.user.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUserManagerImpl extends AbstractSqlManager<User> implements GeneratedUserManager {
    
    private final static Tuple1<Class<Integer>> PRIMARY_KEY_CLASSES = Tuples.of(Integer.class);
    
    protected GeneratedUserManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected User newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final User entity = newEmptyEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setUsername(resultSet.getString(2));
            entity.setStatus(resultSet.getString(3));
            entity.setTimeOnline(resultSet.getInt(4));
            entity.setLinesWritten(resultSet.getInt(5));
            entity.setIsTrusted(User.IS_TRUSTED.typeMapper().toJavaType(resultSet.getString(6)));
            entity.setIsFollower(User.IS_FOLLOWER.typeMapper().toJavaType(resultSet.getString(7)));
            entity.setIsSubscriber(User.IS_SUBSCRIBER.typeMapper().toJavaType(resultSet.getString(8)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public User newEmptyEntity() {
        return new UserImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(User entity, FieldIdentifier<User> identifier) {
        switch ((User.Identifier) identifier) {
            case ID : return entity.getId();
            case USERNAME : return entity.getUsername();
            case STATUS : return entity.getStatus();
            case TIME_ONLINE : return entity.getTimeOnline();
            case LINES_WRITTEN : return entity.getLinesWritten();
            case IS_TRUSTED : return entity.getIsTrusted();
            case IS_FOLLOWER : return entity.getIsFollower();
            case IS_SUBSCRIBER : return entity.getIsSubscriber();
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(User entity, FieldIdentifier<User> identifier, Object value) {
        switch ((User.Identifier) identifier) {
            case ID : entity.setId((Integer) value); break;
            case USERNAME : entity.setUsername((String) value); break;
            case STATUS : entity.setStatus((String) value); break;
            case TIME_ONLINE : entity.setTimeOnline((Integer) value); break;
            case LINES_WRITTEN : entity.setLinesWritten((Integer) value); break;
            case IS_TRUSTED : entity.setIsTrusted((Boolean) value); break;
            case IS_FOLLOWER : entity.setIsFollower((Boolean) value); break;
            case IS_SUBSCRIBER : entity.setIsSubscriber((Boolean) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            User.ID,
            User.USERNAME,
            User.STATUS,
            User.TIME_ONLINE,
            User.LINES_WRITTEN,
            User.IS_TRUSTED,
            User.IS_FOLLOWER,
            User.IS_SUBSCRIBER
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            User.ID
        );
    }
    
    @Override
    public Tuple1<Class<Integer>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
}